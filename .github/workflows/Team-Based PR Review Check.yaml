name: Team-Based PR Review Check
on:
  pull_request_review:
    types: [submitted]
  pull_request:
    types: [opened, reopened, ready_for_review, synchronize]
  merge_group:

jobs:
  check-team-approvals:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      statuses: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check team approvals
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Function to parse CODEOWNERS and extract teams and individuals
            function parseCodeowners(content) {
              const teams = {
                'team-a': new Set(),
                'team-b': new Set()
              };
              const individualOwners = new Set();
              
              content.split('\n').forEach(line => {
                const trimmedLine = line.trim();
                if (trimmedLine && !trimmedLine.startsWith('#')) {
                  const matches = trimmedLine.match(/@[\w/-]+/g);
                  if (matches) {
                    matches.forEach(item => {
                      const cleanItem = item.substring(1); // Remove @ symbol
                      if (cleanItem.toLowerCase().startsWith('team-a/')) {
                        teams['team-a'].add(cleanItem.split('/')[1]);
                      } else if (cleanItem.toLowerCase().startsWith('team-b/')) {
                        teams['team-b'].add(cleanItem.split('/')[1]);
                      } else {
                        individualOwners.add(cleanItem);
                      }
                    });
                  }
                }
              });
              return { teams, individualOwners };
            }
            
            // Read CODEOWNERS file
            let codeowners;
            try {
              codeowners = fs.readFileSync('.github/CODEOWNERS', 'utf8');
            } catch (error) {
              try {
                codeowners = fs.readFileSync('docs/CODEOWNERS', 'utf8');
              } catch (fallbackError) {
                await github.rest.repos.createCommitStatus({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  sha: context.sha,
                  state: 'error',
                  description: 'CODEOWNERS file not found',
                  context: 'Team Approval Check'
                });
                return;
              }
            }
            
            const { teams, individualOwners } = parseCodeowners(codeowners);
            
            // Get PR details
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const prAuthor = pr.data.user.login;
            
            // Get PR reviews
            const reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            // Track approvals by team
            const teamApprovals = {
              'team-a': new Set(),
              'team-b': new Set()
            };
            
            // Process reviews
            reviews.data.forEach(review => {
              if (review.state === 'APPROVED') {
                const reviewer = review.user.login;
                
                // Skip if reviewer is the PR author
                if (reviewer === prAuthor) {
                  return;
                }
                
                // Check team membership
                if (teams['team-a'].has(reviewer)) {
                  teamApprovals['team-a'].add(reviewer);
                }
                if (teams['team-b'].has(reviewer)) {
                  teamApprovals['team-b'].add(reviewer);
                }
                // Check individual owners
                if (individualOwners.has(reviewer)) {
                  // Determine which team to credit based on CODEOWNERS configuration
                  // This might need customization based on your specific rules
                  if (teams['team-a'].has(reviewer)) {
                    teamApprovals['team-a'].add(reviewer);
                  }
                  if (teams['team-b'].has(reviewer)) {
                    teamApprovals['team-b'].add(reviewer);
                  }
                }
              }
            });
            
            const hasTeamAApproval = teamApprovals['team-a'].size > 0;
            const hasTeamBApproval = teamApprovals['team-b'].size > 0;
            const totalApprovals = teamApprovals['team-a'].size + teamApprovals['team-b'].size;
            
            // Check approval requirements
            const requirementsMet = hasTeamAApproval && hasTeamBApproval && totalApprovals >= 2;
            
            if (!requirementsMet) {
              let missingRequirements = [];
              if (!hasTeamAApproval) missingRequirements.push('Team A approval');
              if (!hasTeamBApproval) missingRequirements.push('Team B approval');
              if (totalApprovals < 2) missingRequirements.push(`${2 - totalApprovals} more approval(s)`);
              
              const description = `Missing: ${missingRequirements.join(', ')}`;
              
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: pr.data.head.sha,
                state: 'failure',
                description: description,
                context: 'Team Approval Check'
              });
              
              const warningMessage = `⚠️ Review Requirements Not Met:
              
Current Status:
- Team A Approvals: ${Array.from(teamApprovals['team-a']).join(', ') || 'None'}
- Team B Approvals: ${Array.from(teamApprovals['team-b']).join(', ') || 'None'}
- Total Valid Approvals: ${totalApprovals}

Requirements:
1. At least one approval from Team A
2. At least one approval from Team B
3. Minimum total of 2 approvals
4. PR author (${prAuthor}) cannot approve their own PR

Missing Requirements:
${missingRequirements.map(req => `- ${req}`).join('\n')}`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: warningMessage
              });
            } else {
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: pr.data.head.sha,
                state: 'success',
                description: 'All team approval requirements met',
                context: 'Team Approval Check'
              });
            }
